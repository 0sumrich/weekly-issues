{"version":3,"sources":["components/btnBar.js","components/chart.js","draw/weekly.js","App.js","serviceWorker.js","index.js","data.csv"],"names":["useStyles","makeStyles","theme","wrapper","textAlign","maxWidth","margin","button","cursor","spacing","active","background","palette","grey","border","BtnBar","handleClick","activeLib","libraries","classes","className","map","lib","Button","key","variant","clsx","onClick","Chart","data","id","draw","useEffect","getDateTime","dayNum","hour","monday","d3","Date","now","moment","add","toDate","scheme","slice","weekly","length","selectAll","remove","top","right","bottom","left","width","height","d","chart","attr","append","timeArr","x","domain","range","yMax","average_transactions","y","line","res","day_num","area","y1","y0","openingTypeFill","ot","split","arr","i","arrType","opening_type","push","splitter","forEach","datum","on","console","log","drawPath","xAxis","tickArguments","every","tickFormat","time","yAxis","call","each","el","this","txt","text","openingType","idx","sqSize","drawLeg","style","library","App","libs","Set","o","useState","setActiveLib","e","preventDefault","target","innerHTML","filter","Boolean","window","location","hostname","match","a","csv","raw","init","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.41417af6.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => {\n  return {\n    wrapper: {\n      textAlign: \"center\",\n      maxWidth: 950,\n      margin: \"auto\"\n    },\n    button: {\n      cursor: \"pointer\",\n      margin: theme.spacing(0.5)\n    },\n    active: {\n      background: theme.palette.grey[200],\n      border: `1px solid ${theme.palette.grey[700]}`\n    }\n  };\n});\n\nconst BtnBar = ({ handleClick, activeLib, libraries }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      {libraries.map(lib => {\n        return (\n          <Button\n            key={lib}\n            variant=\"outlined\"\n            className={clsx(classes.button, {\n              [classes.active]: lib === activeLib\n            })}\n            onClick={handleClick}\n          >\n            {lib}\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\nexport default BtnBar;\n","import React, { useEffect } from \"react\"\n\nconst Chart = ({ data, id, draw }) => {\n\tuseEffect(() => {\n\t\tdraw(data)\n\t})\n\treturn <svg id={id} />\n}\n\nexport default Chart","import * as d3 from \"d3\";\nimport moment from \"moment\";\n\nfunction getDateTime(dayNum, hour = 0) {\n  const monday = d3.timeMonday(new Date(Date.now()));\n  return moment(monday)\n    .add(dayNum, \"d\")\n    .add(hour, \"h\")\n    .add(0, \"m\")\n    .toDate();\n}\n\nconst scheme = d3.schemeCategory10.slice(0, 3);\n\nfunction splitter(d) {\n  let arr = [d[0]];\n  let res = [];\n  for (let i = 1; i < d.length; i++) {\n    const arrType = arr[arr.length - 1].opening_type;\n    const thisType = d[i].opening_type;\n    if (thisType === arrType) {\n      arr.push(d[i]);\n    } else {\n      arr.push(d[i]);\n      res.push(arr);\n      arr = [d[i]];\n    }\n  }\n  res.push(arr);\n  return res; //array of arrays\n}\n\nfunction weekly(data) {\n  if (data.length > 0) {\n    d3.select(\"#weekly\")\n      .selectAll(\"*\")\n      .remove();\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n    const width = 950 - margin.left - margin.right;\n    const height = 600 - margin.top - margin.bottom;\n    const d = data;\n    const chart = d3\n      .select(\"#weekly\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    const timeArr = d3.timeHours(getDateTime(0), getDateTime(7), 1);\n\n    const x = d3\n      .scaleTime()\n      .domain([timeArr[0], timeArr[timeArr.length - 1]])\n      .range([0, width]);\n\n    const yMax = d3.max(d.map(d => d.average_transactions));\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, yMax + 10])\n      .range([height, 0]);\n\n    const line = d3\n      .line()\n      .x(d => {\n        const res = getDateTime(d.day_num, d.hour);\n        return x(res);\n      })\n      .y(d => y(d.average_transactions));\n\n    line(d);\n\n    const area = d3\n      .area()\n      .x(d => x(getDateTime(d.day_num, d.hour)))\n      .y1(d => y(d.average_transactions))\n      .y0(height);\n\n    const openingTypeFill = ot => {\n      if (ot === \"closed\") return scheme[0];\n      else if (ot === \"staffed\") return scheme[1];\n      else if (ot === \"SSO\") return scheme[2];\n    };\n\n    const split = splitter(d);\n\n    const drawPath = arr => {\n      chart\n        .append(\"path\")\n        .datum(arr)\n        .attr(\"d\", area)\n        .attr(\"fill\", openingTypeFill(arr[0].opening_type))\n        .on(\"mouseenter\", d => console.log(d));\n    };\n\n    split.forEach(arr => {\n      drawPath(arr);\n    });\n\n    chart\n      .append(\"path\")\n      .datum(d)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", line);\n\n    const xAxis = d3\n      .axisBottom(x)\n      .tickArguments([d3.timeHour.every(12)])\n      .tickFormat(time => {\n        const h = moment(time).hour();\n        const format =\n          h === 0 ? d3.timeFormat(\"\") : d3.timeFormat(\"%H:%M %p \\n %A\");\n        return format(time);\n      });\n    const yAxis = d3.axisLeft(y);\n\n    chart\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxis)\n      .selectAll(\".tick text\")\n      .each(function(d) {\n        const el = d3.select(this);\n        const txt = el.text();\n        if (txt.length > 0) {\n          const y = +el.attr(\"y\");\n          const x = +el.attr(\"x\");\n          const arr = txt.split(\"\\n\");\n          el.text(null)\n            .append(\"tspan\")\n            .attr(\"x\", x)\n            .attr(\"y\", y)\n            .text(arr[0]);\n          el.append(\"tspan\")\n            .attr(\"x\", x)\n            .attr(\"y\", +y + 20)\n            .text(arr[1]);\n        }\n      });\n\n    chart\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis);\n\n    // legend\n    const openingTypes = [\"closed\", \"staffed\", \"SSO\"];\n\n    const drawLeg = (openingType, idx) => {\n      const sqSize = 20;\n      const gap = 5;\n      const top = 20;\n      const y = idx * (sqSize + gap) + top;\n      chart\n        .append(\"rect\")\n        .attr(\"x\", gap)\n        .attr(\"y\", y)\n        .attr(\"height\", sqSize)\n        .attr(\"width\", sqSize)\n        .attr(\"fill\", openingTypeFill(openingType));\n\n      chart\n        .append(\"text\")\n        .attr(\"x\", sqSize + 2 * gap)\n        .attr(\"y\", y + sqSize / 2)\n        .attr(\"alignment-baseline\", \"middle\")\n        .attr(\"font-size\", \"small\")\n        .text(openingType);\n    };\n\n    chart\n      .append(\"text\")\n      .attr(\"x\", 5)\n      .attr(\"y\", 0)\n      .attr(\"alignment-baseline\", \"hanging\")\n      .attr(\"font-size\", \"small\")\n      .text(\"Opening Types\");\n\n    openingTypes.forEach((ot, i) => drawLeg(ot, i));\n\n    //axes labels\n    const text = chart.append(\"text\").style(\"text-anchor\", \"middle\");\n\n    text\n      .append(\"tspan\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0 + margin.top / 2)\n      .text(`Average Weekly Loan Transactions at ${d[0].library}`);\n\n    text\n      .append(\"tspan\")\n      .text(`Between March-November 2019`)\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0 + margin.top / 2)\n      .attr(\"dy\", \"1.6em\");\n\n    chart\n      .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 0 - margin.left + 5)\n      .attr(\"x\", 0 - height / 2)\n      .attr(\"dy\", \"1em\")\n      .attr(\"font-size\", \"small\")\n      .style(\"text-anchor\", \"middle\")\n      .text(\"Average loan transactions\");\n  }\n}\n\nexport default weekly;\n","import React, { useState } from \"react\";\nimport BtnBar from \"./components/btnBar\";\nimport Chart from \"./components/chart\";\nimport weekly from \"./draw/weekly\";\nimport \"./App.css\";\n\nconst App = ({ data }) => {\n  const libs = [...new Set(data.map(o => o.library))];\n  const [activeLib, setActiveLib] = useState(libs[0]);\n\n  const handleLibClick = e => {\n    e.preventDefault();\n    setActiveLib(e.target.innerHTML);\n  };\n\n  const filter = data => data.filter(o => o.library === activeLib);\n\n  return (\n    <main>\n      <BtnBar\n        handleClick={handleLibClick}\n        activeLib={activeLib}\n        libraries={libs}\n      />\n      <Chart draw={weekly} id=\"weekly\" data={filter(data)} />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport raw from \"./data.csv\";\nimport { csv } from \"d3-fetch\";\n\nconst fixData = (arr) => arr.map(o => {\n\tconst keys = ['average_transactions', 'day_num', 'hour']\n\tkeys.forEach(key => {\n\t\to[key] = +o[key]\n\t})\n\treturn o\n})\n\nconst render = async () => {\n\tconst init = await csv(raw);\n\tconst data = fixData(init);\n\tReactDOM.render(<App data={data} />, document.getElementById(\"root\"));\n};\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/data.9de063ff.csv\";"],"sourceRoot":""}